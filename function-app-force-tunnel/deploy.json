{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "tags": {
            "type": "object",
            "metadata": {
                "description": "The tags that will be associated to the resources"
            },
            "defaultValue": {
                "environment": "lab"
            }
        },
        "hubVnetName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the hub Virtual Network"
            },
            "defaultValue": "vnet-hub"
        },
        "spokeVnetName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the spoke Virtual Network"
            },
            "defaultValue": "vnet-spoke"
        },
        "hubCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub Virtual Network"
            },
            "defaultValue": "10.0.0.0/16"
        },
        "spokeCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR blocks assigned to the spoke Virtual Network"
            },
            "defaultValue": "10.1.0.0/16"
        },
        "hubGatewaySubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub Gateway subnet"
            },
            "defaultValue": "10.0.0.0/24"
        },
        "hubBastionSubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub Bastion subnet"
            },
            "defaultValue": "10.0.1.0/24"
        },
        "hubFirewallSubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub Azure Firewall subnet"
            },
            "defaultValue": "10.0.2.0/24"
        },
        "hubPrimarySubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR block assigned to the hub primary subnet"
            },
            "defaultValue": "10.0.3.0/24"
        },
        "spokeAppSubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR blocks assigned to the spoke subnet delegated to App Services"
            },
            "defaultValue": "10.1.0.0/24"
        },
        "spokeDataSubnetCidr": {
            "type": "string",
            "metadata": {
                "description": "The CIDR blocks assigned to the spoke data subnet"
            },
            "defaultValue": "10.1.1.0/24"
        },
        "primarySubnetName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the primary subnet in the hub and on-premises Virtual Networks"
            },
            "defaultValue": "snet-pri"
        },
        "appSubnetName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the spoke subnet delegated to App Services"
            },
            "defaultValue": "snet-app"
        },
        "dataSubnetName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the spoke data subnet"
            },
            "defaultValue": "snet-data"
        },
        "azFirewallPublicIpName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the Public IP used by Azure Firewall"
            },
            "defaultValue": "pip-azfw"
        },
        "azureFirewallName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the Azure Firewall instance"
            },
            "defaultValue": "fwhub"
        },
        "hubPriRouteTable": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the Route Table assigned to the primary subnet in the hub Virtual Network"
            },
            "defaultValue": "rt-hub-pri"
        },
        "spokeRouteTable": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the Route Table assigned to the spoke subnet delegated to App Services"
            },
            "defaultValue": "rt-spoke"
        },
        "functionAppPlanName": {
            "type": "string",
            "metadata": {
                "description": "The name assigned to the Function App Plan"
            },
            "defaultValue": "sp-app"

        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "networkApiVersion": "2020-05-01",
        "resourceDeploymentsApiVersion": "2019-10-01",
        "laApiVersion": "2015-11-01-preview",
        "diagApiVersion": "2017-05-01-preview",
        "webApiVersion": "2019-08-01",
        "appInsightsAPiVersion": "2015-05-01",
        "storageApiVersion": "2019-06-01",
        "hubToSpokePeeringName": "peerhubtospoke",
        "spokeToHubPeeringName": "peerspoketohub",
        "functionAppPlanTier": "ElasticPremium",
        "functionAppPlanSkuName": "EP1",
        "functionAppKind": "functionapp,linux",
        "appServiceKind": "Linux",
        "linuxFxVersion": "Python|3.8",
        "uniqueData": "[uniqueString(resourceGroup().id, subscription().id)]",
        "laWorkspaceName": "[concat('la-',variables('uniqueData'))]",
        "functionName": "[concat('func', variables('uniqueData'))]",
        "storageAccountName": "[concat('st', variables('uniqueData'))]",
        "appInsightsName": "[concat('ai', variables('uniqueData'))]",
        "repoUrl": "https://github.com/mattfeltonma/azure-function-example.git",
        "branch": "master"
    },
    "resources": [
        /* Create centralized Log Analytics Workspace */
        {
            "name": "[variables('laWorkspaceName')]",
            "type": "Microsoft.OperationalInsights/workspaces",
            "apiVersion": "[variables('laApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "sku": {
                    "name": "PerGB2018"
                },
                "retentionInDays": "30"
            },
            "resources": [
            ]
        },
        /* Create hub Virtual Network */
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('hubVnetName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('hubCidr')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "GatewaySubnet",
                        "properties": {
                            "addressPrefix": "[parameters('hubGatewaySubnetCidr')]"
                        }
                    },
                    {
                        "name": "AzureFirewallSubnet",
                        "properties": {
                            "addressPrefix": "[parameters('hubFirewallSubnetCidr')]"
                        }
                    },
                    {
                        "name": "AzureBastionSubnet",
                        "properties": {
                            "addressPrefix": "[parameters('hubBastionSubnetCidr')]"
                        }
                    },
                    {
                        "name": "[parameters('primarySubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('hubPrimarySubnetCidr')]"
                        }
                    }
                ],
                "enableDdosProtection": false
            },
            "resources": [
            ]
        },
        /* Create spoke Virtual Network */
        {
            "type": "Microsoft.Network/virtualNetworks",
            "name": "[parameters('spokeVnetName')]",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[parameters('spokeCidr')]"
                    ]
                },
                "subnets": [
                    {
                        "name": "[parameters('appSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('spokeAppSubnetCidr')]"

                        }
                    },
                    {
                        "name": "[parameters('dataSubnetName')]",
                        "properties": {
                            "addressPrefix": "[parameters('spokeDataSubnetCidr')]"
                        }
                    }
                ],
                "enableDdosProtection": false
            },
            "resources": [
            ]
        },
        /* Create a Public IP for the Azure Firewall instance */
        {
            "name": "[parameters('azFirewallPublicIpName')]",
            "type": "Microsoft.Network/publicIpAddresses",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "publicIpAllocationMethod": "Static"
            },
            "sku": {
                "name": "Standard"
            }
        },
        /* Create the Azure Firewall instance */
        {
            "name": "[parameters('azureFirewallName')]",
            "type": "Microsoft.Network/azureFirewalls",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIpAddresses/', parameters('azFirewallPublicIpName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('hubVnetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('spokeVnetName'))]",
                "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
            ],
            "zones": [
                "1"
            ],
            "properties": {
                "networkRuleCollections": [
                    {
                        "name": "WebAppAccess",
                        "properties": {
                            "priority": 100,
                            "action": {
                                "type": "Allow"
                            },
                            "rules": [
                                {
                                    "name": "AllowWebAcess",
                                    "protocols": [
                                        "TCP"
                                    ],
                                    "sourceAddresses": [
                                        "[parameters('hubPrimarySubnetCidr')]"
                                    ],
                                    "destinationAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "destinationPorts": [
                                        "80"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "applicationRuleCollections": [
                    {
                        "name": "Web",
                        "properties": {
                            "priority": 100,
                            "action": {
                                "type": "Allow"
                            },
                            "rules": [
                                {
                                    "name": "AllowWorldClock",
                                    "description": "Allow API Call to World Clock",
                                    "sourceAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "protocols": [
                                        {
                                            "protocolType": "Http",
                                            "port": "80"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "worldclockapi.com"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "AppInsights",
                        "properties": {
                            "priority": 101,
                            "action": {
                                "type": "Allow"
                            },
                            "rules": [
                                {
                                    "name": "AllowAppInsights",
                                    "description": "Allow App Insights",
                                    "sourceAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "protocols": [
                                        {
                                            "protocolType": "Https",
                                            "port": "443"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "dc.services.visualstudio.com",
                                        "rt.services.visualstudio.com"
                                    ]
                                }
                            ]
                        }
                    },
                    {
                        "name": "AllowCodeDeploy",
                        "properties": {
                            "priority": 102,
                            "action": {
                                "type": "Allow"
                            },
                            "rules": [
                                {
                                    "name": "AllowGitHub",
                                    "description": "Allow access to Github to download function code",
                                    "sourceAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "protocols": [
                                        {
                                            "protocolType": "Https",
                                            "port": "443"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "github.com"
                                    ]
                                },
                                {
                                    "name": "AllowPypi",
                                    "description": "Allow access to PyPi to download packages",
                                    "sourceAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "protocols": [
                                        {
                                            "protocolType": "Https",
                                            "port": "443"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "pypi.org"
                                    ]
                                },
                                {
                                    "name": "Allow",
                                    "description": "Allow access to check PM2 version",
                                    "sourceAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "protocols": [
                                        {
                                            "protocolType": "Https",
                                            "port": "443"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "version.pm2.io"
                                    ]
                                },
                                {
                                    "name": "AllowStorageAccount",
                                    "description": "Allow access to Azure Storage account",
                                    "sourceAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "protocols": [
                                        {
                                            "protocolType": "Https",
                                            "port": "443"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "[concat(variables('storageAccountName'), '.blob.core.windows.net')]"
                                    ]
                                },
                                {
                                    "name": "AllowDownloadPythonDependencies",
                                    "description": "Allow to download Python dependencies",
                                    "sourceAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "protocols": [
                                        {
                                            "protocolType": "Https",
                                            "port": "443"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "files.pythonhosted.org"
                                    ]
                                },
                                {
                                    "name": "AllowTrafficToSelf",
                                    "description": "Allow traffic to function app",
                                    "sourceAddresses": [
                                        "[parameters('spokeAppSubnetCidr')]"
                                    ],
                                    "protocols": [
                                        {
                                            "protocolType": "Https",
                                            "port": "443"
                                        }
                                    ],
                                    "targetFqdns": [
                                        "[concat(variables('functionName'), '.azurewebsites.net')]"
                                    ]
                                }
                            ]
                        }
                    }
                ],
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('hubVnetName'), 'AzureFirewallSubnet')]"
                            },
                            "publicIPAddress": {
                                "id": "[resourceId('Microsoft.Network/publicIpAddresses', parameters('azFirewallPublicIpName'))]"
                            }
                        }
                    }
                ],
                "threatIntelMode": "Alert",
                "sku": {
                    "name": "AZFW_VNet",
                    "tier": "Standard"
                }
            }
        },
        /* Configure the diagnostic settings for Azure Firewall to write the Log Analytics Workspace */
        {
            "name": "[concat(parameters('azureFirewallName'),'/microsoft.insights/diag')]",
            "type": "Microsoft.Network/azureFirewalls/providers/diagnosticSettings",
            "apiVersion": "[variables('diagApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/azureFirewalls/',parameters('azureFirewallName'))]"
            ],
            "properties": {
                "name": "SendToWorkspace",
                "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces',variables('laWorkspaceName'))]",
                "logs": [
                    {
                        "category": "AzureFirewallApplicationRule",
                        "enabled": true
                    },
                    {
                        "category": "AzureFirewallNetworkRule",
                        "enabled": true
                    }
                ],
                "metrics": [
                    {
                        "category": "AllMetrics",
                        "enabled": true
                    }
                ]
            },
            "resources": [
            ]
        },
        /* Create a Route Table for the primary subnet in the hub Virtual Network */
        {
            "name": "[parameters('hubPriRouteTable')]",
            "type": "Microsoft.Network/routeTables",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/azureFirewalls/',parameters('azureFirewallName'))]"
            ],
            "properties": {
                "routes": [
                    {
                        "name": "udr-default",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[reference(parameters('azureFirewallName')).ipConfigurations[0].properties.privateIPAddress]"
                        }
                    },
                    {
                        "name": "udr-bastion",
                        "properties": {
                            "addressPrefix": "[parameters('hubBastionSubnetCidr')]",
                            "nextHopType": "VnetLocal"
                        }
                    },
                    {
                        "name": "udr-spoke",
                        "properties": {
                            "addressPrefix": "[parameters('spokeCidr')]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[reference(parameters('azureFirewallName')).ipConfigurations[0].properties.privateIPAddress]"
                        }
                    }
                ],
                "disableBgpRoutePropagation": "False"
            },
            "resources": [
            ]
        },
        /* Create a Route Table for the subnets in the spoke Virtual Network */
        {
            "name": "[parameters('spokeRouteTable')]",
            "type": "Microsoft.Network/routeTables",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/azureFirewalls/',parameters('azureFirewallName'))]"
            ],
            "properties": {
                "routes": [
                    {
                        "name": "udr-default",
                        "properties": {
                            "addressPrefix": "0.0.0.0/0",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[reference(parameters('azureFirewallName')).ipConfigurations[0].properties.privateIPAddress]"
                        }
                    },
                    {
                        "name": "udr-hub",
                        "properties": {
                            "addressPrefix": "[parameters('hubCidr')]",
                            "nextHopType": "VirtualAppliance",
                            "nextHopIpAddress": "[reference(parameters('azureFirewallName')).ipConfigurations[0].properties.privateIPAddress]"
                        }
                    }
                ],
                "disableBgpRoutePropagation": "True"
            },
            "resources": [
            ]
        },
        /* Assign Route Tables to the appropriate subnets and create the deletegation on the app subnet for App Services  */
        {
            "name": "routeAssignment",
            "apiVersion": "[variables('resourceDeploymentsApiVersion')]",
            "type": "Microsoft.Resources/deployments",
            "dependsOn": [
                "[concat('Microsoft.Network/routeTables/', parameters('hubPriRouteTable'))]",
                "[concat('Microsoft.Network/routeTables/', parameters('spokeRouteTable'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "networkApiVersion": {
                        "value": "[variables('networkApiVersion')]"
                    },
                    "hubPriRouteTableId": {
                        "value": "[resourceId('Microsoft.Network/routeTables',parameters('hubPriRouteTable'))]"
                    },
                    "spokeRouteTableId": {
                        "value": "[resourceId('Microsoft.Network/routeTables',parameters('spokeRouteTable'))]"
                    },
                    "hubVnetName": {
                        "value": "[parameters('hubVnetName')]"
                    },
                    "hubPrimarySubnetCidr": {
                        "value": "[parameters('hubPrimarySubnetCidr')]"
                    },
                    "primarySubnetName": {
                        "value": "[parameters('primarySubnetName')]"
                    },
                    "spokeVnetName": {
                        "value": "[parameters('spokeVnetName')]"
                    },
                    "appSubnetName": {
                        "value": "[parameters('appSubnetName')]"
                    },
                    "dataSubnetName": {
                        "value": "[parameters('dataSubnetName')]"
                    },
                    "appSubnetCidr": {
                        "value": "[parameters('spokeAppSubnetCidr')]"
                    },
                    "dataSubnetCidr": {
                        "value": "[parameters('spokeDataSubnetCidr')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "networkApiVersion": {
                            "type": "string"
                        },
                        "hubVnetName": {
                            "type": "string"
                        },
                        "hubPrimarySubnetCidr": {
                            "type": "string"
                        },
                        "primarySubnetName": {
                            "type": "string"
                        },
                        "hubPriRouteTableId": {
                            "type": "string"
                        },
                        "spokeRouteTableId": {
                            "type": "string"
                        },
                        "spokeVnetName": {
                            "type": "string"
                        },
                        "appSubnetName": {
                            "type": "string"
                        },
                        "dataSubnetName": {
                            "type": "string"
                        },
                        "appSubnetCidr": {
                            "type": "string"
                        },
                        "dataSubnetCidr": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "name": "[concat(parameters('hubVnetName'),'/',parameters('primarySubnetName'))]",
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "[parameters('networkApiVersion')]",
                            "properties": {
                                "addressPrefix": "[parameters('hubPrimarySubnetCidr')]",
                                "routeTable": {
                                    "id": "[parameters('hubPriRouteTableId')]"
                                }
                            }
                        },
                        {
                            "name": "[concat(parameters('spokeVnetName'),'/',parameters('appSubnetName'))]",
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "[parameters('networkApiVersion')]",
                            "properties": {
                                "addressPrefix": "[parameters('appSubnetCidr')]",
                                "delegations": [
                                    {
                                        "name": "delegation",
                                        "properties": {
                                            "serviceName": "Microsoft.Web/serverFarms"
                                        }
                                    }
                                ],
                                "routeTable": {
                                    "id": "[parameters('spokeRouteTableId')]"
                                }
                            }
                        },
                        {
                            "name": "[concat(parameters('spokeVnetName'),'/',parameters('dataSubnetName'))]",
                            "type": "Microsoft.Network/virtualNetworks/subnets",
                            "apiVersion": "[parameters('networkApiVersion')]",
                            "dependsOn": [
                                "[concat('Microsoft.Network/virtualNetworks/',parameters('spokeVnetName'),'/subnets/',parameters('appSubnetName'))]"
                            ],
                            "properties": {
                                "addressPrefix": "[parameters('dataSubnetCidr')]",
                                "routeTable": {
                                    "id": "[parameters('spokeRouteTableId')]"
                                }
                            }
                        }
                    ]
                }
            }
        },
        /* Create Virtual Network Peering for hub to spoke */
        {
            "name": "[concat(parameters('hubVnetName'),'/',variables('hubToSpokePeeringName'))]",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('hubVnetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('spokeVnetName'))]",
                "Microsoft.Resources/deployments/routeAssignment"
            ],
            "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "true",
                "allowGatewayTransit": "false",
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks',parameters('spokeVnetName'))]"
                }
            }
        },
        /* Create Virtual Network Peering for spoke to hub */
        {
            "name": "[concat(parameters('spokeVnetName'),'/',variables('spokeToHubPeeringName'))]",
            "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[resourceGroup().location]",
            "dependsOn": [
                "[concat('Microsoft.Network/virtualNetworks/', parameters('hubVnetName'))]",
                "[concat('Microsoft.Network/virtualNetworks/', parameters('spokeVnetName'))]",
                "Microsoft.Resources/deployments/routeAssignment"
            ],
            "properties": {
                "allowVirtualNetworkAccess": "true",
                "allowForwardedTraffic": "true",
                "useRemoteGateways": "false",
                "remoteVirtualNetwork": {
                    "id": "[resourceId('Microsoft.Network/virtualNetworks',parameters('hubVnetName'))]"
                }
            }
        },
        /* Create a Storage Account for the Function */
        {
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "[variables('storageApiVersion')]",
            "name": "[variables('storageAccountName')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "sku": {
                "name": "Standard_LRS"
            },
            "properties": {
                "supportsHttpsTrafficOnly": true
            }
        },
        /* Create a Functions App Elastic Premium Plan */
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "[variables('webApiVersion')]",
            "name": "[parameters('functionAppPlanName')]",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "sku": {
                "tier": "[variables('functionAppPlanTier')]",
                "name": "[variables('functionAppPlanSkuName')]"
            },
            "kind": "[variables('appServiceKind')]",
            "properties": {
                "reserved": true
            }
        },
        /* Create App Insights instance */
        {
            "apiVersion": "[variables('appInsightsApiVersion')]",
            "name": "[variables('appInsightsName')]",
            "type": "microsoft.insights/components",
            "location": "[variables('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "ApplicationId": "[variables('appInsightsName')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        },
        /* Create the Function App */
        {
            "type": "Microsoft.Web/sites",
            "apiVersion": "[variables('webApiVersion')]",
            "name": "[variables('functionName')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('Microsoft.insights/components', variables('appInsightsName'))]",
                "Microsoft.Resources/deployments/routeAssignment"
            ],
            "kind": "[variables('functionAppKind')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('functionAppPlanName'))]",
                "clientAffinityEnabled": false,
                "siteConfig": {
                    "linuxFxVersion": "[variables('linuxFxVersion')]",
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~3"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "python"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value, ';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'),';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value, ';EndpointSuffix=','core.windows.net')]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('functionName'))]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(concat('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                            "value": "[reference(concat('microsoft.insights/components/', variables('appInsightsName')), '2015-05-01').ConnectionString]"
                        },
                        {
                            "name": "WEBSITE_VNET_ROUTE_ALL",
                            "value": "1"
                        }
                    ]
                }
            },
            "resources": [
                {
                    "type": "sourcecontrols",
                    "apiVersion": "[variables('webApiVersion')]",
                    "name": "web",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('functionName'))]"
                    ],
                    "properties": {
                        "repoUrl": "[variables('repoUrl')]",
                        "branch": "[variables('branch')]",
                        "publishRunbook": true,
                        "isManualIntegration": true
                    }
                },
                {
                    "name": "virtualNetwork",
                    "type": "networkConfig",
                    "apiVersion": "[variables('webApiVersion')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites', variables('functionName'))]"
                    ],
                    "properties": {
                        "subnetResourceId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('spokeVnetName'), parameters('appSubnetName'))]",
                        "swiftSupported": true
                    }
                }
            ]
        }
    ]
}
